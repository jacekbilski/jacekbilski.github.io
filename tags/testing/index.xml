<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on On Software Development</title>
    <link>http://bilski.tech/tags/testing/</link>
    <description>Recent content in Testing on On Software Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 18 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://bilski.tech/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WebCalc iteration 5 - more complex calculations</title>
      <link>http://bilski.tech/posts/webcalc-iteration-5-more-complex-calculations/</link>
      <pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://bilski.tech/posts/webcalc-iteration-5-more-complex-calculations/</guid>
      <description>Welcome everyone to the fifth iteration of WebCalc. Previously I only managed to fix a few issues with the code and upgrade Java, Spring Boot and Gradle. This time I&amp;rsquo;ll get back to adding new functionalities and add a possibility to do more complex calculations like 1+2+3. To IDE then!
But first, let&amp;rsquo;s deal with some technical issues. One is upgrading Gradle to stable version 5.0. Having installed it locally on my machine, I can just call gradle wrapper --gradle-version=5.</description>
    </item>
    
    <item>
      <title>WebCalc iteration 4 - fixes only</title>
      <link>http://bilski.tech/posts/webcalc-iteration-4-fixes-only/</link>
      <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://bilski.tech/posts/webcalc-iteration-4-fixes-only/</guid>
      <description>Welcome to the fourth iteration of WebCalc implementation. Previously I added multiplication and division as operations supported by my WebCalc. Especially the latter one forced me to add and change a few things in the code. By doing so I think I&amp;rsquo;ve made a mistake, that I&amp;rsquo;ll fix now.
The problem was to make Calculator stateful, it now remembers maxFractionDigits. If one user would set maxFractionDigits, all others would see that changed too.</description>
    </item>
    
    <item>
      <title>Testing is storytelling</title>
      <link>http://bilski.tech/posts/testing-is-storytelling/</link>
      <pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://bilski.tech/posts/testing-is-storytelling/</guid>
      <description>While working with a customer, I recently saw a test, that looked like this: throw a big XML (&amp;gt;10kB) at a function, get another XML of similar size back and compare it with a pre-recorded one. The test is green if they&amp;rsquo;re equal. I guess, at the very minimum, it serves a purpose of detecting issues. The problem is that it cannot do much more.
What such a test is not providing are hints as to what the problem is when it fails.</description>
    </item>
    
    <item>
      <title>WebCalc iteration 3 - formatting and cleanup in calculator module</title>
      <link>http://bilski.tech/posts/webcalc-iteration-3-formatting-and-cleanup-in-calculator-module/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://bilski.tech/posts/webcalc-iteration-3-formatting-and-cleanup-in-calculator-module/</guid>
      <description>Welcome to the third iteration of WebCalc implementation. Previously I managed to get only basic operations working, namely addition and subtraction. This time I want to go further and add multiplication and division. Whereas multiplication should be pretty straightforward, I&amp;rsquo;m expecting issues with the division. Once I get these things working, I&amp;rsquo;ll see if I can improve the design of calculator itself and the tests. To IDE then.
Multiplication is, indeed, straightforward.</description>
    </item>
    
    <item>
      <title>WebCalc iteration 2 - actual calculations and modules separation</title>
      <link>http://bilski.tech/posts/webcalc-iteration-2-actual-calculations-and-modules-separation/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://bilski.tech/posts/webcalc-iteration-2-actual-calculations-and-modules-separation/</guid>
      <description>Welcome to the second iteration of WebCalc implementation. Last time I managed only to get a basic construct working and only in a very crude way. Always returning &amp;ldquo;3&amp;rdquo; from a controller is hardly a proper solution. This time I&amp;rsquo;ll separate the app module from calculation one and then I&amp;rsquo;ll start digging into actual calculations.
But first, looking at Gradle files I&amp;rsquo;ve noticed a few unnecessary things. One thing is, that I&amp;rsquo;m specifying explicit versions for JUnit and REST-Assured, which, having Spring Boot, is not necessary.</description>
    </item>
    
  </channel>
</rss>