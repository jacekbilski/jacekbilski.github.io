<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>value on On Software Engineering</title>
    <link>https://www.bilski.tech/tags/value/</link>
    <description>Recent content in value on On Software Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 16 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bilski.tech/tags/value/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Improving your software by Gernot Starke</title>
      <link>https://www.bilski.tech/videos/improving_your_software/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/videos/improving_your_software/</guid>
      <description>It&amp;rsquo;s probably one of quite a few videos about that topic, but probably the only one publicly available that I know of. The topic is: value, as in how &amp;ldquo;business&amp;rdquo; perceives what we, engineers are doing. It&amp;rsquo;s probably the one thing that turns you from a mere code writer to a professional software engineer. At least this is how I feel now that I understand the idea. My recommendation to all developers, if you want to advance your career, learn about value, everything else are implementation details.</description>
    </item>
    
    <item>
      <title>Java Case Study by Micah Martin &amp; Robert &#34;Uncle Bob&#34; Martin</title>
      <link>https://www.bilski.tech/videos/java_case_study/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/videos/java_case_study/</guid>
      <description>This is unfortunately a paid material but I believe it was worth buying. Before I&amp;rsquo;ve seen this whole series I theoretically knew what TDD is and how to do it, but I always struggled with it. Watching this series has shown me how to apply all this theoretical knowledge, put most pieces in place.
The link: https://cleancoders.com/videos?series=java-case-study</description>
    </item>
    
    <item>
      <title>Behaviour over structure</title>
      <link>https://www.bilski.tech/posts/random/behaviour-over-structure/</link>
      <pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/random/behaviour-over-structure/</guid>
      <description>This post was originally posted on INNOQ blog.
Note: In this post, I&amp;rsquo;m using the terms &amp;ldquo;behaviour&amp;rdquo; and &amp;ldquo;structure&amp;rdquo; to describe more &amp;ldquo;dynamic&amp;rdquo; and more &amp;ldquo;static&amp;rdquo; properties of a particular system or piece of software. That is, I&amp;rsquo;m using the term &amp;ldquo;structure&amp;rdquo; for properties like &amp;ldquo;Java is a statically-typed language&amp;rdquo; or &amp;ldquo;We follow Java Beans convention in this project&amp;rdquo;. On the other hand, &amp;ldquo;behaviour&amp;rdquo; to me are things like &amp;ldquo;The application correctly calculates SHA-512 checksum&amp;rdquo; or &amp;ldquo;The calculations are done within 10 seconds&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>
