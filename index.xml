<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>On Software Engineering</title>
    <link>https://www.bilski.tech/</link>
    <description>Recent content on On Software Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 20 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bilski.tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simple made easy by Rich Hickey</title>
      <link>https://www.bilski.tech/videos/simple_made_easy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/videos/simple_made_easy/</guid>
      <description>Most likely number one video on my list. I&amp;rsquo;ve seen it already at least 5 times and every single time I&amp;rsquo;m finding something new in there. A gold mine.
I don&amp;rsquo;t want to spoil the surprise too much, but Rich makes a point that &amp;ldquo;easy&amp;rdquo; is subjective but &amp;ldquo;simple&amp;rdquo; is objective and builds on that. Consequencces are profound.
Unfortunately I cannot embedd it here, but it&amp;rsquo;s available here: https://www.infoq.com/presentations/Simple-Made-Easy/</description>
    </item>
    
    <item>
      <title>TDD, where did it all go wrong by Ian Cooper</title>
      <link>https://www.bilski.tech/videos/tdd_where_did_it_all_go_wrong/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/videos/tdd_where_did_it_all_go_wrong/</guid>
      <description>Probably number two on my list. This video helped me greatly understand the concept of a &amp;ldquo;unit&amp;rdquo;. That in turn, combined with bounded context idea from DDD world and hexagonal architecture with its ports and adapters, changed my perspective on tests in general. I finally understood what is the scope of a unit test and how I was doing it wrong previously.
  </description>
    </item>
    
    <item>
      <title>Improving your software by Gernot Starke</title>
      <link>https://www.bilski.tech/videos/improving_your_software/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/videos/improving_your_software/</guid>
      <description>It&amp;rsquo;s probably one of quite a few videos about that topic, but probably the only one publicly available that I know of. The topic is: value, as in how &amp;ldquo;business&amp;rdquo; perceives what we, engineers are doing. It&amp;rsquo;s probably the one thing that turns you from a mere code writer to a professional software engineer. At least this is how I feel now that I understand the idea. My recommendation to all developers, if you want to advance your career, learn about value, everything else are implementation details.</description>
    </item>
    
    <item>
      <title>Java Case Study by Micah Martin &amp; Robert &#34;Uncle Bob&#34; Martin</title>
      <link>https://www.bilski.tech/videos/java_case_study/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/videos/java_case_study/</guid>
      <description>This is unfortunately a paid material but I believe it was worth buying. Before I&amp;rsquo;ve seen this whole series I theoretically knew what TDD is and how to do it, but I always struggled with it. Watching this series has shown me how to apply all this theoretical knowledge, put most pieces in place.
The link: https://cleancoders.com/videos?series=java-case-study</description>
    </item>
    
    <item>
      <title>Engineering you by Martin Thompson</title>
      <link>https://www.bilski.tech/videos/engineering_you/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/videos/engineering_you/</guid>
      <description>This video is about simple things, basics sometimes, yet we tend to forget about them way too often. Worth watching every now and then to remind ourselves what it means to be a software engineer.
  </description>
    </item>
    
    <item>
      <title>Agile is dead by Pragmatic Dave Thomas</title>
      <link>https://www.bilski.tech/videos/agile_is_dead/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/videos/agile_is_dead/</guid>
      <description>This video is about how original idea of &amp;ldquo;Agile&amp;rdquo; is different from what we&amp;rsquo;re usually doing on &amp;ldquo;agile&amp;rdquo; projects. And Dave, as one of the 17 who created the Manifesto for Agile Software Development, knows what he&amp;rsquo;s talking about.
  </description>
    </item>
    
    <item>
      <title>Software, faster by Dan North</title>
      <link>https://www.bilski.tech/videos/software_faster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/videos/software_faster/</guid>
      <description>This video is just one of many in which Dan presents some of the patterns he sees and uses to deliver value faster. All are equally good and worth watching. He also seem to have started a book collecting all those patterns, available on Leanpub, but it also seems that he hasn&amp;rsquo;t been working on that for quite some time already.
  </description>
    </item>
    
    <item>
      <title>Spring-less testing</title>
      <link>https://www.bilski.tech/posts/random/spring-less-testing/</link>
      <pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/random/spring-less-testing/</guid>
      <description>Foreword This article was originally posted on INNOQ blog.
After it was published it caused a bit of a discussion on Twitter (even the creator of Spring Framework, Rod Johnson, replied) but also internally in the company (sorry, not public). The reason is, I believe, I&amp;rsquo;ve failed to clearly state my intention right from the start. My goal when writing this post always was to say: whenever you can write a test for your application without using Spring, you should do it exatly this way.</description>
    </item>
    
    <item>
      <title>Familiarity - friend or foe (part 2)</title>
      <link>https://www.bilski.tech/posts/random/familiarity-friend-or-foe-part-2/</link>
      <pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/random/familiarity-friend-or-foe-part-2/</guid>
      <description>The first part of this post was not really meant to be a first part of, possibly, a longer series. Yet, I seem to have found another case where things that we know and ways how we work might be preventing us from finding other solutions, possibly better.
Some time ago I joined a new project. I was supposed to start working on a new application that would, later on, be taken over by a team I was part of.</description>
    </item>
    
    <item>
      <title>Tests Granularity</title>
      <link>https://www.bilski.tech/posts/testing_primer/tests-granularity/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/testing_primer/tests-granularity/</guid>
      <description>Note, this post was originally published on INNOQ blog together with Torsten Mandry.
In two previous posts (see below) we discussed the benefits of automated tests and the properties of a good test. So far we were trying to avoid differentiating the tests in any way. This time we want to address one way how tests can be classified: tests granularity.
Previous posts:
 Why You Should Write Automated Tests Anatomy of a Good Test  What is granularity?</description>
    </item>
    
    <item>
      <title>Anatomy of a Good Test</title>
      <link>https://www.bilski.tech/posts/testing_primer/anatomy-of-a-good-test/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/testing_primer/anatomy-of-a-good-test/</guid>
      <description>Note, this post was originally published on INNOQ blog together with Torsten Mandry.
In our last post, we focused on why we should write tests and what value they provide. This time we will go far more technical and take a look at a single test. We will show what makes a test a good one and describe desired and unwanted properties. Interestingly enough, all those properties hold, no matter how isolated or integrated the test is.</description>
    </item>
    
    <item>
      <title>Why You Should Write Automated Tests</title>
      <link>https://www.bilski.tech/posts/testing_primer/why-you-should-write-automated-tests/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/testing_primer/why-you-should-write-automated-tests/</guid>
      <description>Note, this post was originally published on INNOQ blog together with Torsten Mandry.
This blog post gives an overview of the most common benefits gained by writing automated tests. It starts in a place where most of the projects weâ€™ve seen so far are: tests are written as a last step of the development process. Then it shows additional benefits that could be gained if we all gave the tests a bit more focus and care.</description>
    </item>
    
    <item>
      <title>Iteration 9 - custom functions</title>
      <link>https://www.bilski.tech/posts/webcalc/iteration-9-custom-functions/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/webcalc/iteration-9-custom-functions/</guid>
      <description>Welcome to the 9th iteration of WebCalc. Previously I managed to extract billing module from the app module and started differentiating users from one another. This time I&amp;rsquo;ll enable the users to define their own functions. To IDEs then.
But first I must apologize for what I&amp;rsquo;ve done last time. I coupled my User class with Spring&amp;rsquo;s UserDetails. It&amp;rsquo;s obvious to me now, in my face even. Apparently, it wasn&amp;rsquo;t back then.</description>
    </item>
    
    <item>
      <title>Familiarity - friend or foe</title>
      <link>https://www.bilski.tech/posts/random/familiarity-friend-or-foe/</link>
      <pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/random/familiarity-friend-or-foe/</guid>
      <description>Familiarity seems like a good thing, you know the thing, how to deal with it, what to expect and where problems might be hiding. But more and more I see its dark side.
Some time ago I was working on a legacy system. It was very complex and fragile, most developers didn&amp;rsquo;t want to have anything to do with it. We knew the time would come when we would need to touch the core of this monster, so we wrote some tests and started slowly cleaning it up.</description>
    </item>
    
    <item>
      <title>Iteration 8 - billing module extraction and differentiating users</title>
      <link>https://www.bilski.tech/posts/webcalc/iteration-8-billing-module-extraction-and-differentiating-users/</link>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/webcalc/iteration-8-billing-module-extraction-and-differentiating-users/</guid>
      <description>Welcome to the 8th iteration of WebCalc. Previously I promised to extract billing module from the app module and that&amp;rsquo;s what I&amp;rsquo;ll start with. To IDEs then.
There&amp;rsquo;s nothing really fancy about extracting this module. You can see the full commit 9f191153, but it really boils down to creating a new module and copying build.gradle from calculator module, adding it to settings.gradle, moving Billing and BillingShould to the new module and importing new module in the app module.</description>
    </item>
    
    <item>
      <title>Iteration 7 - billing</title>
      <link>https://www.bilski.tech/posts/webcalc/iteration-7-billing/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/webcalc/iteration-7-billing/</guid>
      <description>Welcome to the 7th iteration of WebCalc. Previously I scratched a surface of users and security in order to start working on billing. In retrospective, I don&amp;rsquo;t think I needed any user and Spring Security at all for billing to work, at least not in the first phase. Luckily, their introduction didn&amp;rsquo;t require much and should not actually hurt. The plan for this iteration is to get the billing as far as possible in terms of functionality.</description>
    </item>
    
    <item>
      <title>Iteration 6 - introducing users</title>
      <link>https://www.bilski.tech/posts/webcalc/iteration-6-introducing-users/</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/webcalc/iteration-6-introducing-users/</guid>
      <description>Welcome to the 6th iteration of WebCalc. Previously I was dealing mostly with adding some more complex calculations. Like I mentioned there already, I think that I have already enough business logic to start moving into other areas like billing or user management. I also said that I&amp;rsquo;d be going into the unknown. Up until now, I had a rough idea of how to do things, now I don&amp;rsquo;t, I&amp;rsquo;ll be exploring a lot.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://www.bilski.tech/about/</link>
      <pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/about/</guid>
      <description>I&amp;rsquo;m a software engineer trying to find the sweet spot between providing business value to my customers and technical excellence enabling me to work fast.
For those interested, here&amp;rsquo;s my CV.
I&amp;rsquo;m also using PGP, this is my key, fingerprint is A594 DB1E F3DE AD6E C784 442B 93F9 C3F3 0943 789A.</description>
    </item>
    
    <item>
      <title>Iteration 5 - more complex calculations</title>
      <link>https://www.bilski.tech/posts/webcalc/iteration-5-more-complex-calculations/</link>
      <pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/webcalc/iteration-5-more-complex-calculations/</guid>
      <description>Welcome everyone to the fifth iteration of WebCalc. Previously I only managed to fix a few issues with the code and upgrade Java, Spring Boot and Gradle. This time I&amp;rsquo;ll get back to adding new functionalities and add a possibility to do more complex calculations like 1+2+3. To IDE then!
But first, let&amp;rsquo;s deal with some technical issues. One is upgrading Gradle to stable version 5.0. Having installed it locally on my machine, I can just call gradle wrapper --gradle-version=5.</description>
    </item>
    
    <item>
      <title>Iteration 4 - fixes only</title>
      <link>https://www.bilski.tech/posts/webcalc/iteration-4-fixes-only/</link>
      <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/webcalc/iteration-4-fixes-only/</guid>
      <description>Welcome to the fourth iteration of WebCalc implementation. Previously I added multiplication and division as operations supported by my WebCalc. Especially the latter one forced me to add and change a few things in the code. By doing so I think I&amp;rsquo;ve made a mistake, that I&amp;rsquo;ll fix now.
The problem was to make Calculator stateful, it now remembers maxFractionDigits. If one user would set maxFractionDigits, all others would see that changed too.</description>
    </item>
    
    <item>
      <title>Testing is storytelling</title>
      <link>https://www.bilski.tech/posts/random/testing-is-storytelling/</link>
      <pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/random/testing-is-storytelling/</guid>
      <description>While working with a customer, I recently saw a test, that looked like this: throw a big XML (&amp;gt;10kB) at a function, get another XML of similar size back and compare it with a pre-recorded one. The test is green if they&amp;rsquo;re equal. I guess, at the very minimum, it serves a purpose of detecting issues. The problem is that it cannot do much more.
What such a test is not providing are hints as to what the problem is when it fails.</description>
    </item>
    
    <item>
      <title>Iteration 3 - formatting and cleanup in calculator module</title>
      <link>https://www.bilski.tech/posts/webcalc/iteration-3-formatting-and-cleanup-in-calculator-module/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/webcalc/iteration-3-formatting-and-cleanup-in-calculator-module/</guid>
      <description>Welcome to the third iteration of WebCalc implementation. Previously I managed to get only basic operations working, namely addition and subtraction. This time I want to go further and add multiplication and division. Whereas multiplication should be pretty straightforward, I&amp;rsquo;m expecting issues with the division. Once I get these things working, I&amp;rsquo;ll see if I can improve the design of calculator itself and the tests. To IDE then.
Multiplication is, indeed, straightforward.</description>
    </item>
    
    <item>
      <title>Iteration 2 - actual calculations and modules separation</title>
      <link>https://www.bilski.tech/posts/webcalc/iteration-2-actual-calculations-and-modules-separation/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/webcalc/iteration-2-actual-calculations-and-modules-separation/</guid>
      <description>Welcome to the second iteration of WebCalc implementation. Last time I managed only to get a basic construct working and only in a very crude way. Always returning &amp;ldquo;3&amp;rdquo; from a controller is hardly a proper solution. This time I&amp;rsquo;ll separate the app module from calculation one and then I&amp;rsquo;ll start digging into actual calculations.
But first, looking at Gradle files I&amp;rsquo;ve noticed a few unnecessary things. One thing is, that I&amp;rsquo;m specifying explicit versions for JUnit and REST-Assured, which, having Spring Boot, is not necessary.</description>
    </item>
    
    <item>
      <title>Iteration 1 - setting up with one test</title>
      <link>https://www.bilski.tech/posts/webcalc/iteration-1-setting-up-with-one-test/</link>
      <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/webcalc/iteration-1-setting-up-with-one-test/</guid>
      <description>Welcome to the first iteration of WebCalc implementation. In my previous post I just explained my motivations and goals for this project. This time I&amp;rsquo;ll do some actual coding. Although in the end, I&amp;rsquo;ll try to have something &amp;ldquo;business&amp;rdquo; related, I guess most of the time I&amp;rsquo;ll spend wiring things up. To the keyboard then.
Goal I want to have a very first and simple test working: adding 1 to 2.</description>
    </item>
    
    <item>
      <title>Motivation and plan</title>
      <link>https://www.bilski.tech/posts/webcalc/motivation-and-plan/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/webcalc/motivation-and-plan/</guid>
      <description>My previous posts were rather theoretical, a lot of philosophy, very little code. This time I&amp;rsquo;ll do almost the opposite, I&amp;rsquo;ll be actually writing a little system before your eyes, so there will be a lot of code. I will be referring to some concepts I was writing about previously, but this time I&amp;rsquo;ll not be discussing them, just applying.
Motivation There are many reasons I want to do this:</description>
    </item>
    
    <item>
      <title>Understanding decomposed</title>
      <link>https://www.bilski.tech/posts/random/understanding-decomposed/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/random/understanding-decomposed/</guid>
      <description>I previously wrote about simplicity and how it helps to understand software code. In that post, I already mentioned the use of concepts like set theory. Iâ€™d like to expand on this and show how to boost readability of code.
Despite what people might think, our main purpose as developers is not writing software, but solving problems. A code is just a means, not the goal. Nobody demands software just for the sake of it from a developer.</description>
    </item>
    
    <item>
      <title>Supporting understanding with simplicity</title>
      <link>https://www.bilski.tech/posts/random/supporting-understanding-with-simplicity/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/random/supporting-understanding-with-simplicity/</guid>
      <description>Some time ago, my colleague Joy Clark wrote about simplicity. I&amp;rsquo;ve also approached this topic once before. I&amp;rsquo;d like to follow up on both articles and show how simplicity can boost our understanding of software. I will also propose that we look at other disciplines to see if and how simplicity affects them. Maybe we can benefit from their experience.
What&amp;rsquo;s all the fuss about? Why do we even talk about simplicity?</description>
    </item>
    
    <item>
      <title>What do I believe in</title>
      <link>https://www.bilski.tech/posts/random/what-do-i-believe-in/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/random/what-do-i-believe-in/</guid>
      <description>Below are my guiding principles, that are the basis of what, how and why am I doing with regards to software development.
Long term development speed First and foremost I understand my main responsibility as delivering value as fast as possible in the long term. By delivering value I mean adding, changing or removing features, that &amp;ldquo;business&amp;rdquo; requested, but also things like:
 improving processes around me, both technical, like application deployment, and business, like simplifying stock management, proposing and introducing new techniques and technologies whenever I feel that they will improve things, sharing knowledge within and outside of the team (blog, mentoring, pair/crowd programming, etc.</description>
    </item>
    
    <item>
      <title>Code quality as a winning factor</title>
      <link>https://www.bilski.tech/posts/random/code-quality-as-a-winning-factor/</link>
      <pubDate>Fri, 21 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/random/code-quality-as-a-winning-factor/</guid>
      <description>Software development seems to me like the only discipline where practitioners can get away with producing crap. If you&amp;rsquo;re a doctor and you screw up surgery or treatment, in the worst case you will kill your patient, in the best you will not make his/her situation worse. If you&amp;rsquo;re a bridge builder and you&amp;rsquo;ll make a mistake during construction, in the worst case the bridge will collapse killing people, in the best case, the bridge will be usable only after adding some additional support to it.</description>
    </item>
    
    <item>
      <title>Writing good test scenarios</title>
      <link>https://www.bilski.tech/posts/random/writing-good-test-scenarios/</link>
      <pubDate>Tue, 16 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/random/writing-good-test-scenarios/</guid>
      <description>On my current company&amp;rsquo;s blog I posted some time ago part one of &amp;ldquo;writing good tests&amp;rdquo;. Now it&amp;rsquo;s time to continue.
Last time I just barely scratched the topic of writing test scenarios. I briefly gave only a few hints like &amp;ldquo;avoid unnecessary information&amp;rdquo;, &amp;ldquo;don&amp;rsquo;t include implementation details&amp;rdquo; or &amp;ldquo;don&amp;rsquo;t repeat yourself in different scenarios&amp;rdquo;. This time I&amp;rsquo;d like to dig deeper and present results of discussions we had in the team.</description>
    </item>
    
    <item>
      <title>Microservices - a solution or a problem?</title>
      <link>https://www.bilski.tech/posts/random/microservices-a-solution-or-a-problem/</link>
      <pubDate>Mon, 04 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/random/microservices-a-solution-or-a-problem/</guid>
      <description>Microservices seem to be everywhere, everybody is talking about them, writing and consuming them. For a good reason, they can solve a lot of problems like scaling, high availability, independent developability, etc. But are they really THE solution to our problems? Do we always remember their costs?
Integration One of the good things about microservices is, that they&amp;rsquo;re simple. Each one should be easy to understand even by a new person joining a team.</description>
    </item>
    
    <item>
      <title>More on MyFaces and ContentType</title>
      <link>https://www.bilski.tech/posts/random/more-on-myfaces-and-contenttype/</link>
      <pubDate>Thu, 23 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/random/more-on-myfaces-and-contenttype/</guid>
      <description>I&amp;rsquo;ve dug some more, debugged some more and know a little more. The whole problem with Apache MyFaces and ContentType comes from the awful idea that there is more than one moment, when, for a single request, resulting ContentType is evaluated.
MyFaces looks at Accept HTTP header, which, in my case, states text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8. MyFaces goes through that list and picks first entry which it understands, in my case that&amp;rsquo;s text/html. It doesn&amp;rsquo;t really matter, that next entry application/xhtml+xml is what I would really want, &amp;ldquo;text/html&amp;rdquo; was first.</description>
    </item>
    
    <item>
      <title>Including JavaScript in HTML content</title>
      <link>https://www.bilski.tech/posts/random/including-javascript-in-html-content/</link>
      <pubDate>Tue, 07 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/random/including-javascript-in-html-content/</guid>
      <description>For the last couple of days, I was struggling with Java ServerFaces. The exact problem was, that commandButtons were working as expected, but commandLinks were not. We are using Apache MyFaces with Tomahawk and Sandbox components. We were going to use commandLinks for navigation and other uses like selecting nodes in Tomahawks&#39; tree2 component, but we were forced to render commandButtons instead, which looked quite awkward in some places.
Symptoms we got, were that three browsers: Firefox, Opera and Konqueror, were complaining about &amp;ldquo;oamSubmitForm is not defined&amp;rdquo; after clicking a commandLink.</description>
    </item>
    
    <item>
      <title>Autowiring EJB 3.0 in Tomcat from remote JBoss</title>
      <link>https://www.bilski.tech/posts/random/autowiring-ejb-3.0-in-tomcat-from-remote-jboss/</link>
      <pubDate>Sat, 20 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>https://www.bilski.tech/posts/random/autowiring-ejb-3.0-in-tomcat-from-remote-jboss/</guid>
      <description>To be honest I&amp;rsquo;ve never fully understood EJB 2.x or written an application using that specification. Well, I&amp;rsquo;ve written some EJBs, but it was just following an example of different EJB in the same project. Even though we used Spring at that time nothing seemed simple and straightforward. Every time I wanted to use an EJB I had to modify several XML files to be able to inject EJB into some bean.</description>
    </item>
    
  </channel>
</rss>
